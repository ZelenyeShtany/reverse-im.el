* Reverse-im.el

  [[https://melpa.org/#/reverse-im][https://melpa.org/packages/reverse-im-badge.svg]]

  Overrides [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Translation-Keymaps.html][function-key-map]] for preferred input-method to translate input sequences
  to English, so we can use Emacs bindings while the non-default system layout is active.

  N.B. For all the examples below "russian-computer" input method is used.

** Installation

*** Manual

    #+BEGIN_SRC emacs-lisp
      M-x package-install RET reverse-im RET
    #+END_SRC

*** Using use-package

    Using provided minor mode instead (see [[Settings][Settings]] for details):
    #+BEGIN_SRC emacs-lisp
      (use-package reverse-im
        :ensure t
        :custom
        (reverse-im-input-methods '("russian-computer"))
        :config
        (reverse-im-mode t))
    #+END_SRC

    or, by using the old way

    #+BEGIN_SRC emacs-lisp
      (use-package reverse-im
        :ensure t
        :config
        (reverse-im-activate "russian-computer"))
    #+END_SRC

    A more complex setup

    #+BEGIN_SRC emacs-lisp
      (use-package reverse-im
        :ensure t
        :bind
        ("M-T" . reverse-im-translate-word)
        :custom-update
        (reverse-im-input-methods "russian-computer")
        :config
        (reverse-im-mode t)
        (advice-add 'read-char-exclusive :around #'reverse-im-read-char))
    #+END_SRC


** Usage
   Reverse-im provides simple minor mode that activates/deactivates translations for all
   input methods from ([[https://www.gnu.org/software/emacs/manual/html_node/emacs/Easy-Customization.html][customizable]]) reverse-im-input-methods list (empty by default).

   If you have [[https://github.com/justbur/emacs-which-key][which-key]] installed, you can examine how an input method will be remapped by calling

   #+BEGIN_SRC emacs-lisp
     M-x reverse-im-which-key-show
   #+END_SRC


*** Settings

    NB: I highly recommend the use-package method.

    #+BEGIN_SRC emacs-lisp
      ;; standard customization interface, note that this will turn on the mode immediately
      M-x customize-variable RET reverse-im-input-methods RET
      ;; These store list variable in `custom-file'.
      ;; provides autocompletion, one input-method at a time
      M-x reverse-im-add-input-method RET russian-computer RET
    #+END_SRC

    Since version 0.0.2 all possible bindings with Ctrl, Meta, and Super are translated.
    If you want to change it (e.g. you don't use Super)
    #+BEGIN_SRC emacs-lisp
      (setq 'reverse-im-modifiers '(control meta))
      ;; or
      M-x customize-variable RET reverse-im-modifiers RET
    #+END_SRC


*** Activation/Deactivation

    #+BEGIN_SRC emacs-lisp
      M-x reverse-im-mode RET
      ;; or
      (reverse-im-mode t) ; call with a negative argument to disable
    #+END_SRC


    Alternatively, you can directly call translation function:
    #+BEGIN_SRC emacs-lisp
      (reverse-im-activate "russian-computer")
    #+END_SRC


    Since version 0.0.3 it supports multiple input methods too:
    #+BEGIN_SRC emacs-lisp
      (reverse-im-activate '("russian-computer" "ukrainian-computer"))
    #+END_SRC

    If something goes wrong or you just want to turn translation off.

    #+BEGIN_SRC emacs-lisp
      (reverse-im-deactivate)
      ;; or
      (reverse-im-deactivate t)
      ;; to reset translation tables cache
    #+END_SRC

** Char folding
   Emacs supports [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Lax-Search.html#Lax-Search][Lax Matching During Searching]] and since version 27 you can include your own search substitutions. Reverse-im provides reverse-im-char-fold-include function to generate such list based on current translation keymap.

   #+BEGIN_SRC emacs-lisp
     (use-package char-fold
       :after reverse-im
       :custom
       (char-fold-include (append char-fold--default-include
                                  (reverse-im-char-fold-include)))
       (char-fold-symmetric t)
       (search-default-mode #'char-fold-to-regexp))
   #+END_SRC

*** pre-27 versions
    You can download the new version of char-fold.el manually, or using something like
    #+BEGIN_SRC emacs-lisp
      (use-package char-fold
        :after reverse-im
        :custom
        (char-fold-include (append char-fold--default-include
                                   (reverse-im-char-fold-include)))
        (char-fold-symmetric t)
        (search-default-mode #'char-fold-to-regexp)
        :quelpa (char-fold :url "https://raw.githubusercontent.com/emacs-mirror/emacs/master/lisp/char-fold.el"
                           :fetcher url))
    #+END_SRC

** Interactive translation
   If you want to fix region or a word which was typed using incorrect layout, you can use interactive functions reverse-im-translate-region and reverse-im-translate-word respectively.



** Known issues:

   - Bindings with AltGr (as Meta) [[https://github.com/a13/reverse-im.el/issues/4#issuecomment-308143947][don't work]] well on Windows.

*** Advising read-char (new in 0.0.4)

    Reverse-im doesn't work with custom dispatchers like org-export, org-capture etc, you can try to fix it by advising read-char-exclusive. Do it on your own risk since the feature is experimental and wasn't tested good enough.

    #+BEGIN_SRC emacs-lisp
      (advice-add 'read-char-exclusive :around #'reverse-im-read-char)
    #+END_SRC

    If something goes wrong, remove the advice by
    #+BEGIN_SRC emacs-lisp
      (advice-remove 'read-char-exclusive #'reverse-im-read-char)
    #+END_SRC
